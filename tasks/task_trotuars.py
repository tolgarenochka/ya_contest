"""
    В городе М есть два любимых занятия: укладывать плитку и проводить непонятные раскопки тротуара. До начала очередного
сезона ремонтов на всех тротуарах была уложена плитка. После проведения раскопок тротуар непригоден для использования,
пока на нем не уложат плитку. Всего в городе М kтротуаров.

    От каждого тротуара без плитки жители города М ежедневно получают одну единицу печали. Если тротуар был раскопан в день
a, а плитка на нём была уложена в день b, то жители города получат b−a
единиц печали. Плитку можно уложить и в день раскопок, тогда жители получат 0 единиц печали. Тротуар, на котором
проводились раскопки может быть снова раскопан и, если на нем была плитка, то она будет сломана.

    Все раскопки и укладки плитки должны завершиться до выборов мэра города М, при этом на всех раскопанных тротуарах
перед выборами должна быть уложена плитка. Всего работ по раскопкам тротуаров планируется n.
Руководителю компании-подрядчика по укладке плитки попал в руке план раскопок тротуаров с указанием номера тротуара и
номера дня, когда тротуар будет раскопан. К сожалению, в бюджете выделены средства только для m укладок плитки
на тротуарах. Зато в компании достаточно трудолюбивых работников чтобы уложить любое количество плитки в любой из дней.

    Определите, какое наименьшее суммарное количество единиц печали получат жители города М до выборов мэра.
"""


def min():
    k, n, m = map(int, input().split())
    digs = []

    for i in range(n):
        a = list(map(int, input().split()))
        digs.append(a)

    trotuars = []
    sad_days = 0

    for _ in range(k):
        trotuar = ["0", [], 0]
        trotuars.append(trotuar)

    count_digging_trotuars = 0

    for dig in digs:
        if trotuars[dig[1]-1][0] == "0":
            count_digging_trotuars += 1
            trotuars[dig[1]-1] = ["1", [dig[0]]]
        else:
            trotuars[dig[1]-1][1].append(dig[0])

    print(trotuars)

    if count_digging_trotuars > m:
        return -1

    while m > 0:
        for trotuar in trotuars:
            if m > 0:
                if trotuar[0] == "1" or trotuar[0] == "0" and len(trotuar[1]) != 0:
                    m -= 1
                    if len(trotuar[1]) != 1:
                        sad_days += trotuar[1][-1] - trotuar[1][0]
                    trotuar[0] = "0"
                    trotuar[1].pop()

    print(trotuars)

    return sad_days


print(min())